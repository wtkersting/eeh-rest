paths:
  /Users:
    post:
      tags:
        - Users
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Users.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    put:
      tags:
        - Users
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Users.upsert__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    patch:
      tags:
        - Users
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Users.upsert__patch_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    get:
      tags:
        - Users
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Users.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Users'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - Users
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Users.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - Users
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Users.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - Users
      summary: Check whether a model instance exists in the data source.
      operationId: 'Users.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - Users
      summary: Check whether a model instance exists in the data source.
      operationId: 'Users.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Users
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Users.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    delete:
      tags:
        - Users
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Users.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Users
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Users.prototype.updateAttributes__put_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
        - name: id
          in: path
          description: Users id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
    patch:
      tags:
        - Users
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Users.prototype.updateAttributes__patch_Users_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
        - name: id
          in: path
          description: Users id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - Users
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Users.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - Users
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Users.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Users'
      deprecated: false
  /Users/update:
    post:
      tags:
        - Users
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Users.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Users'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - Users
      summary: Count instances of the model matched by where from the data source.
      operationId: Users.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Exceptions/replaceOrCreate:
    post:
      tags:
        - Exception
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Exception.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exception'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exception'
      deprecated: false
  /Exceptions/upsertWithWhere:
    post:
      tags:
        - Exception
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Exception.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Exception'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exception'
      deprecated: false
  '/Exceptions/{id}/replace':
    post:
      tags:
        - Exception
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Exception.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Exception'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Exception'
      deprecated: false
  /Exceptions:
    get:
      tags:
        - Exception
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Exception.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Exception'
      deprecated: false
  /Apps/replaceOrCreate:
    post:
      tags:
        - App
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: App.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/App'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/App'
      deprecated: false
  /Apps/upsertWithWhere:
    post:
      tags:
        - App
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: App.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/App'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/App'
      deprecated: false
  '/Apps/{id}/replace':
    post:
      tags:
        - App
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: App.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/App'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/App'
      deprecated: false
  /Apps:
    get:
      tags:
        - App
      summary: Find all instances of the model matched by filter from the data source.
      operationId: App.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/App'
      deprecated: false
  /CatalogVersions/replaceOrCreate:
    post:
      tags:
        - CatalogVersion
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CatalogVersion.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CatalogVersion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CatalogVersion'
      deprecated: false
  /CatalogVersions/upsertWithWhere:
    post:
      tags:
        - CatalogVersion
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: CatalogVersion.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CatalogVersion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CatalogVersion'
      deprecated: false
  '/CatalogVersions/{id}/replace':
    post:
      tags:
        - CatalogVersion
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: CatalogVersion.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CatalogVersion'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CatalogVersion'
      deprecated: false
  /CatalogVersions:
    get:
      tags:
        - CatalogVersion
      summary: Find all instances of the model matched by filter from the data source.
      operationId: CatalogVersion.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CatalogVersion'
      deprecated: false
  /CodeNames/replaceOrCreate:
    post:
      tags:
        - CodeName
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: CodeName.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CodeName'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CodeName'
      deprecated: false
  /CodeNames/upsertWithWhere:
    post:
      tags:
        - CodeName
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: CodeName.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/CodeName'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CodeName'
      deprecated: false
  '/CodeNames/{id}/replace':
    post:
      tags:
        - CodeName
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: CodeName.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/CodeName'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/CodeName'
      deprecated: false
  /CodeNames:
    get:
      tags:
        - CodeName
      summary: Find all instances of the model matched by filter from the data source.
      operationId: CodeName.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/CodeName'
      deprecated: false
  /Criteria:
    post:
      tags:
        - Criteria
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Criteria.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
    put:
      tags:
        - Criteria
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Criteria.upsert__put_Criteria
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
    patch:
      tags:
        - Criteria
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Criteria.upsert__patch_Criteria
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
    get:
      tags:
        - Criteria
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Criteria.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Criteria'
      deprecated: false
  /Criteria/replaceOrCreate:
    post:
      tags:
        - Criteria
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Criteria.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
  /Criteria/upsertWithWhere:
    post:
      tags:
        - Criteria
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Criteria.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
  '/Criteria/{id}/replace':
    post:
      tags:
        - Criteria
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Criteria.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Criteria'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Criteria'
      deprecated: false
  /Events/replaceOrCreate:
    post:
      tags:
        - Event
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Event.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events/upsertWithWhere:
    post:
      tags:
        - Event
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Event.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  '/Events/{id}/replace':
    post:
      tags:
        - Event
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Event.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Event'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Event'
      deprecated: false
  /Events:
    get:
      tags:
        - Event
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Event.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
      deprecated: false
  /EventDetails-IIBs/replaceOrCreate:
    post:
      tags:
        - EventDetails-IIB
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EventDetails-IIB.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventDetails-IIB'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIB'
      deprecated: false
  /EventDetails-IIBs/upsertWithWhere:
    post:
      tags:
        - EventDetails-IIB
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: EventDetails-IIB.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EventDetails-IIB'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIB'
      deprecated: false
  '/EventDetails-IIBs/{id}/replace':
    post:
      tags:
        - EventDetails-IIB
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: EventDetails-IIB.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventDetails-IIB'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIB'
      deprecated: false
  /EventDetails-IIBs:
    get:
      tags:
        - EventDetails-IIB
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EventDetails-IIB.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EventDetails-IIB'
      deprecated: false
  /EventDetails-IIBStats/replaceOrCreate:
    post:
      tags:
        - EventDetails-IIBStats
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EventDetails-IIBStats.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventDetails-IIBStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIBStats'
      deprecated: false
  /EventDetails-IIBStats/upsertWithWhere:
    post:
      tags:
        - EventDetails-IIBStats
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: EventDetails-IIBStats.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EventDetails-IIBStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIBStats'
      deprecated: false
  '/EventDetails-IIBStats/{id}/replace':
    post:
      tags:
        - EventDetails-IIBStats
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: EventDetails-IIBStats.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventDetails-IIBStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventDetails-IIBStats'
      deprecated: false
  /EventDetails-IIBStats:
    get:
      tags:
        - EventDetails-IIBStats
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EventDetails-IIBStats.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EventDetails-IIBStats'
      deprecated: false
  /EventQueries:
    post:
      tags:
        - EventQuery
      summary: Create a new instance of the model and persist it into the data source.
      operationId: EventQuery.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
    put:
      tags:
        - EventQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: EventQuery.upsert__put_EventQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
    patch:
      tags:
        - EventQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: EventQuery.upsert__patch_EventQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
    get:
      tags:
        - EventQuery
      summary: Find all instances of the model matched by filter from the data source.
      operationId: EventQuery.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/EventQuery'
      deprecated: false
  /EventQueries/replaceOrCreate:
    post:
      tags:
        - EventQuery
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: EventQuery.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
  /EventQueries/upsertWithWhere:
    post:
      tags:
        - EventQuery
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: EventQuery.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
  '/EventQueries/{id}/replace':
    post:
      tags:
        - EventQuery
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: EventQuery.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/EventQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/EventQuery'
      deprecated: false
  '/EventQueries/{id}':
    delete:
      tags:
        - EventQuery
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: EventQuery.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /mqmds:
    post:
      tags:
        - mqmd
      summary: Create a new instance of the model and persist it into the data source.
      operationId: mqmd.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    put:
      tags:
        - mqmd
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.upsert__put_mqmds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    patch:
      tags:
        - mqmd
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.upsert__patch_mqmds
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    get:
      tags:
        - mqmd
      summary: Find all instances of the model matched by filter from the data source.
      operationId: mqmd.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/replaceOrCreate:
    post:
      tags:
        - mqmd
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mqmd.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/upsertWithWhere:
    post:
      tags:
        - mqmd
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: mqmd.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  '/mqmds/{id}/exists':
    get:
      tags:
        - mqmd
      summary: Check whether a model instance exists in the data source.
      operationId: 'mqmd.exists__get_mqmds_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/mqmds/{id}':
    head:
      tags:
        - mqmd
      summary: Check whether a model instance exists in the data source.
      operationId: 'mqmd.exists__head_mqmds_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - mqmd
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: mqmd.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    delete:
      tags:
        - mqmd
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: mqmd.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - mqmd
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mqmd.prototype.updateAttributes__put_mqmds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
        - name: id
          in: path
          description: mqmd id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
    patch:
      tags:
        - mqmd
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'mqmd.prototype.updateAttributes__patch_mqmds_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
        - name: id
          in: path
          description: mqmd id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  '/mqmds/{id}/replace':
    post:
      tags:
        - mqmd
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: mqmd.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/findOne:
    get:
      tags:
        - mqmd
      summary: Find first instance of the model matched by filter from the data source.
      operationId: mqmd.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mqmd'
      deprecated: false
  /mqmds/update:
    post:
      tags:
        - mqmd
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: mqmd.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mqmd'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /mqmds/count:
    get:
      tags:
        - mqmd
      summary: Count instances of the model matched by where from the data source.
      operationId: mqmd.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-threadStats:
    post:
      tags:
        - iib-threadStats
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-threadStats.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
    put:
      tags:
        - iib-threadStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-threadStats.upsert__put_iib-threadStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
    patch:
      tags:
        - iib-threadStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-threadStats.upsert__patch_iib-threadStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
    get:
      tags:
        - iib-threadStats
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-threadStats.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-threadStats'
      deprecated: false
  /iib-threadStats/replaceOrCreate:
    post:
      tags:
        - iib-threadStats
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-threadStats.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
  /iib-threadStats/upsertWithWhere:
    post:
      tags:
        - iib-threadStats
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-threadStats.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
  '/iib-threadStats/{id}/exists':
    get:
      tags:
        - iib-threadStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-threadStats.exists__get_iib-threadStats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-threadStats/{id}':
    head:
      tags:
        - iib-threadStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-threadStats.exists__head_iib-threadStats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-threadStats
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-threadStats.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
    delete:
      tags:
        - iib-threadStats
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-threadStats.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-threadStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-threadStats.prototype.updateAttributes__put_iib-threadStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-threadStats'
        - name: id
          in: path
          description: iib-threadStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
    patch:
      tags:
        - iib-threadStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-threadStats.prototype.updateAttributes__patch_iib-threadStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-threadStats'
        - name: id
          in: path
          description: iib-threadStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
  '/iib-threadStats/{id}/replace':
    post:
      tags:
        - iib-threadStats
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-threadStats.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
  /iib-threadStats/findOne:
    get:
      tags:
        - iib-threadStats
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-threadStats.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-threadStats'
      deprecated: false
  /iib-threadStats/update:
    post:
      tags:
        - iib-threadStats
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-threadStats.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-threadStats'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-threadStats/count:
    get:
      tags:
        - iib-threadStats
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-threadStats.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-terminalStats:
    post:
      tags:
        - iib-terminalStats
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-terminalStats.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
    put:
      tags:
        - iib-terminalStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-terminalStats.upsert__put_iib-terminalStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
    patch:
      tags:
        - iib-terminalStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-terminalStats.upsert__patch_iib-terminalStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
    get:
      tags:
        - iib-terminalStats
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-terminalStats.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  /iib-terminalStats/replaceOrCreate:
    post:
      tags:
        - iib-terminalStats
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-terminalStats.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  /iib-terminalStats/upsertWithWhere:
    post:
      tags:
        - iib-terminalStats
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-terminalStats.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  '/iib-terminalStats/{id}/exists':
    get:
      tags:
        - iib-terminalStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-terminalStats.exists__get_iib-terminalStats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-terminalStats/{id}':
    head:
      tags:
        - iib-terminalStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-terminalStats.exists__head_iib-terminalStats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-terminalStats
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-terminalStats.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
    delete:
      tags:
        - iib-terminalStats
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-terminalStats.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-terminalStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-terminalStats.prototype.updateAttributes__put_iib-terminalStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-terminalStats'
        - name: id
          in: path
          description: iib-terminalStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
    patch:
      tags:
        - iib-terminalStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: >-
        iib-terminalStats.prototype.updateAttributes__patch_iib-terminalStats_{id}
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-terminalStats'
        - name: id
          in: path
          description: iib-terminalStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  '/iib-terminalStats/{id}/replace':
    post:
      tags:
        - iib-terminalStats
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-terminalStats.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  /iib-terminalStats/findOne:
    get:
      tags:
        - iib-terminalStats
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-terminalStats.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-terminalStats'
      deprecated: false
  /iib-terminalStats/update:
    post:
      tags:
        - iib-terminalStats
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-terminalStats.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-terminalStats'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-terminalStats/count:
    get:
      tags:
        - iib-terminalStats
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-terminalStats.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-serverInfos:
    post:
      tags:
        - iib-serverInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-serverInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
    put:
      tags:
        - iib-serverInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-serverInfo.upsert__put_iib-serverInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
    patch:
      tags:
        - iib-serverInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-serverInfo.upsert__patch_iib-serverInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
    get:
      tags:
        - iib-serverInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-serverInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  /iib-serverInfos/replaceOrCreate:
    post:
      tags:
        - iib-serverInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-serverInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  /iib-serverInfos/upsertWithWhere:
    post:
      tags:
        - iib-serverInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-serverInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  '/iib-serverInfos/{id}/exists':
    get:
      tags:
        - iib-serverInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-serverInfo.exists__get_iib-serverInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-serverInfos/{id}':
    head:
      tags:
        - iib-serverInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-serverInfo.exists__head_iib-serverInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-serverInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-serverInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
    delete:
      tags:
        - iib-serverInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-serverInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-serverInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-serverInfo.prototype.updateAttributes__put_iib-serverInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-serverInfo'
        - name: id
          in: path
          description: iib-serverInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
    patch:
      tags:
        - iib-serverInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-serverInfo.prototype.updateAttributes__patch_iib-serverInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-serverInfo'
        - name: id
          in: path
          description: iib-serverInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  '/iib-serverInfos/{id}/replace':
    post:
      tags:
        - iib-serverInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-serverInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  /iib-serverInfos/findOne:
    get:
      tags:
        - iib-serverInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-serverInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-serverInfo'
      deprecated: false
  /iib-serverInfos/update:
    post:
      tags:
        - iib-serverInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-serverInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-serverInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-serverInfos/count:
    get:
      tags:
        - iib-serverInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-serverInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-nodeStats:
    post:
      tags:
        - iib-nodeStats
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-nodeStats.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
    put:
      tags:
        - iib-nodeStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeStats.upsert__put_iib-nodeStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
    patch:
      tags:
        - iib-nodeStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeStats.upsert__patch_iib-nodeStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
    get:
      tags:
        - iib-nodeStats
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-nodeStats.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  /iib-nodeStats/replaceOrCreate:
    post:
      tags:
        - iib-nodeStats
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeStats.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  /iib-nodeStats/upsertWithWhere:
    post:
      tags:
        - iib-nodeStats
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-nodeStats.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  '/iib-nodeStats/{id}/exists':
    get:
      tags:
        - iib-nodeStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-nodeStats.exists__get_iib-nodeStats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-nodeStats/{id}':
    head:
      tags:
        - iib-nodeStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-nodeStats.exists__head_iib-nodeStats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-nodeStats
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-nodeStats.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
    delete:
      tags:
        - iib-nodeStats
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-nodeStats.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-nodeStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-nodeStats.prototype.updateAttributes__put_iib-nodeStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeStats'
        - name: id
          in: path
          description: iib-nodeStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
    patch:
      tags:
        - iib-nodeStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-nodeStats.prototype.updateAttributes__patch_iib-nodeStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeStats'
        - name: id
          in: path
          description: iib-nodeStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  '/iib-nodeStats/{id}/replace':
    post:
      tags:
        - iib-nodeStats
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-nodeStats.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  /iib-nodeStats/findOne:
    get:
      tags:
        - iib-nodeStats
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-nodeStats.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeStats'
      deprecated: false
  /iib-nodeStats/update:
    post:
      tags:
        - iib-nodeStats
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-nodeStats.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeStats'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-nodeStats/count:
    get:
      tags:
        - iib-nodeStats
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-nodeStats.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-nodeInfos:
    post:
      tags:
        - iib-nodeInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-nodeInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
    put:
      tags:
        - iib-nodeInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeInfo.upsert__put_iib-nodeInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
    patch:
      tags:
        - iib-nodeInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeInfo.upsert__patch_iib-nodeInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
    get:
      tags:
        - iib-nodeInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-nodeInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  /iib-nodeInfos/replaceOrCreate:
    post:
      tags:
        - iib-nodeInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-nodeInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  /iib-nodeInfos/upsertWithWhere:
    post:
      tags:
        - iib-nodeInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-nodeInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  '/iib-nodeInfos/{id}/exists':
    get:
      tags:
        - iib-nodeInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-nodeInfo.exists__get_iib-nodeInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-nodeInfos/{id}':
    head:
      tags:
        - iib-nodeInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-nodeInfo.exists__head_iib-nodeInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-nodeInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-nodeInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
    delete:
      tags:
        - iib-nodeInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-nodeInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-nodeInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-nodeInfo.prototype.updateAttributes__put_iib-nodeInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeInfo'
        - name: id
          in: path
          description: iib-nodeInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
    patch:
      tags:
        - iib-nodeInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-nodeInfo.prototype.updateAttributes__patch_iib-nodeInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeInfo'
        - name: id
          in: path
          description: iib-nodeInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  '/iib-nodeInfos/{id}/replace':
    post:
      tags:
        - iib-nodeInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-nodeInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  /iib-nodeInfos/findOne:
    get:
      tags:
        - iib-nodeInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-nodeInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-nodeInfo'
      deprecated: false
  /iib-nodeInfos/update:
    post:
      tags:
        - iib-nodeInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-nodeInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-nodeInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-nodeInfos/count:
    get:
      tags:
        - iib-nodeInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-nodeInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-flowStats:
    post:
      tags:
        - iib-flowStats
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-flowStats.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
    put:
      tags:
        - iib-flowStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowStats.upsert__put_iib-flowStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
    patch:
      tags:
        - iib-flowStats
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowStats.upsert__patch_iib-flowStats
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
    get:
      tags:
        - iib-flowStats
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-flowStats.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-flowStats'
      deprecated: false
  /iib-flowStats/replaceOrCreate:
    post:
      tags:
        - iib-flowStats
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowStats.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
  /iib-flowStats/upsertWithWhere:
    post:
      tags:
        - iib-flowStats
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-flowStats.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
  '/iib-flowStats/{id}/exists':
    get:
      tags:
        - iib-flowStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-flowStats.exists__get_iib-flowStats_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-flowStats/{id}':
    head:
      tags:
        - iib-flowStats
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-flowStats.exists__head_iib-flowStats_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-flowStats
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-flowStats.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
    delete:
      tags:
        - iib-flowStats
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-flowStats.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-flowStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-flowStats.prototype.updateAttributes__put_iib-flowStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowStats'
        - name: id
          in: path
          description: iib-flowStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
    patch:
      tags:
        - iib-flowStats
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-flowStats.prototype.updateAttributes__patch_iib-flowStats_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowStats'
        - name: id
          in: path
          description: iib-flowStats id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
  '/iib-flowStats/{id}/replace':
    post:
      tags:
        - iib-flowStats
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-flowStats.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
  /iib-flowStats/findOne:
    get:
      tags:
        - iib-flowStats
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-flowStats.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowStats'
      deprecated: false
  /iib-flowStats/update:
    post:
      tags:
        - iib-flowStats
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-flowStats.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowStats'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-flowStats/count:
    get:
      tags:
        - iib-flowStats
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-flowStats.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-flowInfos:
    post:
      tags:
        - iib-flowInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-flowInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
    put:
      tags:
        - iib-flowInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowInfo.upsert__put_iib-flowInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
    patch:
      tags:
        - iib-flowInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowInfo.upsert__patch_iib-flowInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
    get:
      tags:
        - iib-flowInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-flowInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  /iib-flowInfos/replaceOrCreate:
    post:
      tags:
        - iib-flowInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-flowInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  /iib-flowInfos/upsertWithWhere:
    post:
      tags:
        - iib-flowInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-flowInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  '/iib-flowInfos/{id}/exists':
    get:
      tags:
        - iib-flowInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-flowInfo.exists__get_iib-flowInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-flowInfos/{id}':
    head:
      tags:
        - iib-flowInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-flowInfo.exists__head_iib-flowInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-flowInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-flowInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
    delete:
      tags:
        - iib-flowInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-flowInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-flowInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-flowInfo.prototype.updateAttributes__put_iib-flowInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowInfo'
        - name: id
          in: path
          description: iib-flowInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
    patch:
      tags:
        - iib-flowInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-flowInfo.prototype.updateAttributes__patch_iib-flowInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowInfo'
        - name: id
          in: path
          description: iib-flowInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  '/iib-flowInfos/{id}/replace':
    post:
      tags:
        - iib-flowInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-flowInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  /iib-flowInfos/findOne:
    get:
      tags:
        - iib-flowInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-flowInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-flowInfo'
      deprecated: false
  /iib-flowInfos/update:
    post:
      tags:
        - iib-flowInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-flowInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-flowInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-flowInfos/count:
    get:
      tags:
        - iib-flowInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-flowInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-eventData:
    post:
      tags:
        - iib-eventData
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-eventData.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
    put:
      tags:
        - iib-eventData
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-eventData.upsert__put_iib-eventData
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
    patch:
      tags:
        - iib-eventData
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-eventData.upsert__patch_iib-eventData
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
    get:
      tags:
        - iib-eventData
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-eventData.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-eventData'
      deprecated: false
  /iib-eventData/replaceOrCreate:
    post:
      tags:
        - iib-eventData
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-eventData.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
  /iib-eventData/upsertWithWhere:
    post:
      tags:
        - iib-eventData
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-eventData.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
  '/iib-eventData/{id}/exists':
    get:
      tags:
        - iib-eventData
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-eventData.exists__get_iib-eventData_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-eventData/{id}':
    head:
      tags:
        - iib-eventData
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-eventData.exists__head_iib-eventData_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-eventData
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-eventData.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
    delete:
      tags:
        - iib-eventData
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-eventData.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-eventData
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-eventData.prototype.updateAttributes__put_iib-eventData_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-eventData'
        - name: id
          in: path
          description: iib-eventData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
    patch:
      tags:
        - iib-eventData
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-eventData.prototype.updateAttributes__patch_iib-eventData_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-eventData'
        - name: id
          in: path
          description: iib-eventData id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
  '/iib-eventData/{id}/replace':
    post:
      tags:
        - iib-eventData
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-eventData.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
  /iib-eventData/findOne:
    get:
      tags:
        - iib-eventData
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-eventData.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-eventData'
      deprecated: false
  /iib-eventData/update:
    post:
      tags:
        - iib-eventData
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-eventData.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-eventData'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-eventData/count:
    get:
      tags:
        - iib-eventData
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-eventData.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-brokerInfos:
    post:
      tags:
        - iib-brokerInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-brokerInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
    put:
      tags:
        - iib-brokerInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-brokerInfo.upsert__put_iib-brokerInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
    patch:
      tags:
        - iib-brokerInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-brokerInfo.upsert__patch_iib-brokerInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
    get:
      tags:
        - iib-brokerInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-brokerInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  /iib-brokerInfos/replaceOrCreate:
    post:
      tags:
        - iib-brokerInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-brokerInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  /iib-brokerInfos/upsertWithWhere:
    post:
      tags:
        - iib-brokerInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-brokerInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  '/iib-brokerInfos/{id}/exists':
    get:
      tags:
        - iib-brokerInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-brokerInfo.exists__get_iib-brokerInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-brokerInfos/{id}':
    head:
      tags:
        - iib-brokerInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-brokerInfo.exists__head_iib-brokerInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-brokerInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-brokerInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
    delete:
      tags:
        - iib-brokerInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-brokerInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-brokerInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-brokerInfo.prototype.updateAttributes__put_iib-brokerInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-brokerInfo'
        - name: id
          in: path
          description: iib-brokerInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
    patch:
      tags:
        - iib-brokerInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-brokerInfo.prototype.updateAttributes__patch_iib-brokerInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-brokerInfo'
        - name: id
          in: path
          description: iib-brokerInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  '/iib-brokerInfos/{id}/replace':
    post:
      tags:
        - iib-brokerInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-brokerInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  /iib-brokerInfos/findOne:
    get:
      tags:
        - iib-brokerInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-brokerInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-brokerInfo'
      deprecated: false
  /iib-brokerInfos/update:
    post:
      tags:
        - iib-brokerInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-brokerInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-brokerInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-brokerInfos/count:
    get:
      tags:
        - iib-brokerInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-brokerInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /iib-Catalogs:
    post:
      tags:
        - iib-Catalog
      summary: Create a new instance of the model and persist it into the data source.
      operationId: iib-Catalog.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
    put:
      tags:
        - iib-Catalog
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-Catalog.upsert__put_iib-Catalogs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
    patch:
      tags:
        - iib-Catalog
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: iib-Catalog.upsert__patch_iib-Catalogs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
    get:
      tags:
        - iib-Catalog
      summary: Find all instances of the model matched by filter from the data source.
      operationId: iib-Catalog.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/iib-Catalog'
      deprecated: false
  /iib-Catalogs/replaceOrCreate:
    post:
      tags:
        - iib-Catalog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: iib-Catalog.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
  /iib-Catalogs/upsertWithWhere:
    post:
      tags:
        - iib-Catalog
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: iib-Catalog.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
  '/iib-Catalogs/{id}/exists':
    get:
      tags:
        - iib-Catalog
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-Catalog.exists__get_iib-Catalogs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/iib-Catalogs/{id}':
    head:
      tags:
        - iib-Catalog
      summary: Check whether a model instance exists in the data source.
      operationId: 'iib-Catalog.exists__head_iib-Catalogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - iib-Catalog
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: iib-Catalog.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
    delete:
      tags:
        - iib-Catalog
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: iib-Catalog.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - iib-Catalog
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-Catalog.prototype.updateAttributes__put_iib-Catalogs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-Catalog'
        - name: id
          in: path
          description: iib-Catalog id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
    patch:
      tags:
        - iib-Catalog
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'iib-Catalog.prototype.updateAttributes__patch_iib-Catalogs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-Catalog'
        - name: id
          in: path
          description: iib-Catalog id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
  '/iib-Catalogs/{id}/replace':
    post:
      tags:
        - iib-Catalog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: iib-Catalog.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
  /iib-Catalogs/findOne:
    get:
      tags:
        - iib-Catalog
      summary: Find first instance of the model matched by filter from the data source.
      operationId: iib-Catalog.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/iib-Catalog'
      deprecated: false
  /iib-Catalogs/update:
    post:
      tags:
        - iib-Catalog
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: iib-Catalog.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/iib-Catalog'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /iib-Catalogs/count:
    get:
      tags:
        - iib-Catalog
      summary: Count instances of the model matched by where from the data source.
      operationId: iib-Catalog.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchStacks:
    post:
      tags:
        - exchStack
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchStack.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
    put:
      tags:
        - exchStack
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchStack.upsert__put_exchStacks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
    patch:
      tags:
        - exchStack
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchStack.upsert__patch_exchStacks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
    get:
      tags:
        - exchStack
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchStack.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchStack'
      deprecated: false
  /exchStacks/replaceOrCreate:
    post:
      tags:
        - exchStack
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchStack.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
  /exchStacks/upsertWithWhere:
    post:
      tags:
        - exchStack
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchStack.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
  '/exchStacks/{id}/exists':
    get:
      tags:
        - exchStack
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchStack.exists__get_exchStacks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchStacks/{id}':
    head:
      tags:
        - exchStack
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchStack.exists__head_exchStacks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchStack
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchStack.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
    delete:
      tags:
        - exchStack
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchStack.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchStack
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchStack.prototype.updateAttributes__put_exchStacks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchStack'
        - name: id
          in: path
          description: exchStack id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
    patch:
      tags:
        - exchStack
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchStack.prototype.updateAttributes__patch_exchStacks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchStack'
        - name: id
          in: path
          description: exchStack id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
  '/exchStacks/{id}/replace':
    post:
      tags:
        - exchStack
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchStack.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
  /exchStacks/findOne:
    get:
      tags:
        - exchStack
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchStack.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchStack'
      deprecated: false
  /exchStacks/update:
    post:
      tags:
        - exchStack
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchStack.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchStack'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchStacks/count:
    get:
      tags:
        - exchStack
      summary: Count instances of the model matched by where from the data source.
      operationId: exchStack.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchReQueues:
    post:
      tags:
        - exchReQueue
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchReQueue.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
    put:
      tags:
        - exchReQueue
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchReQueue.upsert__put_exchReQueues
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
    patch:
      tags:
        - exchReQueue
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchReQueue.upsert__patch_exchReQueues
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
    get:
      tags:
        - exchReQueue
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchReQueue.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchReQueue'
      deprecated: false
  /exchReQueues/replaceOrCreate:
    post:
      tags:
        - exchReQueue
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchReQueue.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
  /exchReQueues/upsertWithWhere:
    post:
      tags:
        - exchReQueue
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchReQueue.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
  '/exchReQueues/{id}/exists':
    get:
      tags:
        - exchReQueue
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchReQueue.exists__get_exchReQueues_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchReQueues/{id}':
    head:
      tags:
        - exchReQueue
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchReQueue.exists__head_exchReQueues_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchReQueue
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchReQueue.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
    delete:
      tags:
        - exchReQueue
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchReQueue.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchReQueue
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchReQueue.prototype.updateAttributes__put_exchReQueues_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchReQueue'
        - name: id
          in: path
          description: exchReQueue id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
    patch:
      tags:
        - exchReQueue
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchReQueue.prototype.updateAttributes__patch_exchReQueues_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchReQueue'
        - name: id
          in: path
          description: exchReQueue id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
  '/exchReQueues/{id}/replace':
    post:
      tags:
        - exchReQueue
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchReQueue.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
  /exchReQueues/findOne:
    get:
      tags:
        - exchReQueue
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchReQueue.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchReQueue'
      deprecated: false
  /exchReQueues/update:
    post:
      tags:
        - exchReQueue
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchReQueue.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchReQueue'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchReQueues/count:
    get:
      tags:
        - exchReQueue
      summary: Count instances of the model matched by where from the data source.
      operationId: exchReQueue.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchParms:
    post:
      tags:
        - exchParm
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchParm.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
    put:
      tags:
        - exchParm
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchParm.upsert__put_exchParms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
    patch:
      tags:
        - exchParm
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchParm.upsert__patch_exchParms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
    get:
      tags:
        - exchParm
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchParm.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchParm'
      deprecated: false
  /exchParms/replaceOrCreate:
    post:
      tags:
        - exchParm
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchParm.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
  /exchParms/upsertWithWhere:
    post:
      tags:
        - exchParm
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchParm.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
  '/exchParms/{id}/exists':
    get:
      tags:
        - exchParm
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchParm.exists__get_exchParms_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchParms/{id}':
    head:
      tags:
        - exchParm
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchParm.exists__head_exchParms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchParm
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchParm.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
    delete:
      tags:
        - exchParm
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchParm.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchParm
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchParm.prototype.updateAttributes__put_exchParms_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchParm'
        - name: id
          in: path
          description: exchParm id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
    patch:
      tags:
        - exchParm
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchParm.prototype.updateAttributes__patch_exchParms_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchParm'
        - name: id
          in: path
          description: exchParm id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
  '/exchParms/{id}/replace':
    post:
      tags:
        - exchParm
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchParm.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
  /exchParms/findOne:
    get:
      tags:
        - exchParm
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchParm.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchParm'
      deprecated: false
  /exchParms/update:
    post:
      tags:
        - exchParm
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchParm.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchParm'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchParms/count:
    get:
      tags:
        - exchParm
      summary: Count instances of the model matched by where from the data source.
      operationId: exchParm.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchDumps:
    post:
      tags:
        - exchDump
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchDump.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
    put:
      tags:
        - exchDump
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchDump.upsert__put_exchDumps
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
    patch:
      tags:
        - exchDump
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchDump.upsert__patch_exchDumps
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
    get:
      tags:
        - exchDump
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchDump.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchDump'
      deprecated: false
  /exchDumps/replaceOrCreate:
    post:
      tags:
        - exchDump
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchDump.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
  /exchDumps/upsertWithWhere:
    post:
      tags:
        - exchDump
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchDump.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
  '/exchDumps/{id}/exists':
    get:
      tags:
        - exchDump
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchDump.exists__get_exchDumps_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchDumps/{id}':
    head:
      tags:
        - exchDump
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchDump.exists__head_exchDumps_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchDump
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchDump.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
    delete:
      tags:
        - exchDump
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchDump.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchDump
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchDump.prototype.updateAttributes__put_exchDumps_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchDump'
        - name: id
          in: path
          description: exchDump id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
    patch:
      tags:
        - exchDump
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchDump.prototype.updateAttributes__patch_exchDumps_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchDump'
        - name: id
          in: path
          description: exchDump id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
  '/exchDumps/{id}/replace':
    post:
      tags:
        - exchDump
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchDump.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
  /exchDumps/findOne:
    get:
      tags:
        - exchDump
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchDump.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchDump'
      deprecated: false
  /exchDumps/update:
    post:
      tags:
        - exchDump
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchDump.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchDump'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchDumps/count:
    get:
      tags:
        - exchDump
      summary: Count instances of the model matched by where from the data source.
      operationId: exchDump.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchApplications:
    post:
      tags:
        - exchApplication
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchApplication.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
    put:
      tags:
        - exchApplication
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchApplication.upsert__put_exchApplications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
    patch:
      tags:
        - exchApplication
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchApplication.upsert__patch_exchApplications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
    get:
      tags:
        - exchApplication
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchApplication.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchApplication'
      deprecated: false
  /exchApplications/replaceOrCreate:
    post:
      tags:
        - exchApplication
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchApplication.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
  /exchApplications/upsertWithWhere:
    post:
      tags:
        - exchApplication
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchApplication.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
  '/exchApplications/{id}/exists':
    get:
      tags:
        - exchApplication
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchApplication.exists__get_exchApplications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchApplications/{id}':
    head:
      tags:
        - exchApplication
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchApplication.exists__head_exchApplications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchApplication
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchApplication.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
    delete:
      tags:
        - exchApplication
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchApplication.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchApplication
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchApplication.prototype.updateAttributes__put_exchApplications_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchApplication'
        - name: id
          in: path
          description: exchApplication id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
    patch:
      tags:
        - exchApplication
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchApplication.prototype.updateAttributes__patch_exchApplications_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchApplication'
        - name: id
          in: path
          description: exchApplication id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
  '/exchApplications/{id}/replace':
    post:
      tags:
        - exchApplication
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchApplication.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
  /exchApplications/findOne:
    get:
      tags:
        - exchApplication
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchApplication.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchApplication'
      deprecated: false
  /exchApplications/update:
    post:
      tags:
        - exchApplication
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchApplication.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchApplication'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchApplications/count:
    get:
      tags:
        - exchApplication
      summary: Count instances of the model matched by where from the data source.
      operationId: exchApplication.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exchAppHeaders:
    post:
      tags:
        - exchAppHeader
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exchAppHeader.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
    put:
      tags:
        - exchAppHeader
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchAppHeader.upsert__put_exchAppHeaders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
    patch:
      tags:
        - exchAppHeader
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exchAppHeader.upsert__patch_exchAppHeaders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
    get:
      tags:
        - exchAppHeader
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exchAppHeader.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exchAppHeader'
      deprecated: false
  /exchAppHeaders/replaceOrCreate:
    post:
      tags:
        - exchAppHeader
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exchAppHeader.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
  /exchAppHeaders/upsertWithWhere:
    post:
      tags:
        - exchAppHeader
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exchAppHeader.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
  '/exchAppHeaders/{id}/exists':
    get:
      tags:
        - exchAppHeader
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchAppHeader.exists__get_exchAppHeaders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exchAppHeaders/{id}':
    head:
      tags:
        - exchAppHeader
      summary: Check whether a model instance exists in the data source.
      operationId: 'exchAppHeader.exists__head_exchAppHeaders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exchAppHeader
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exchAppHeader.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
    delete:
      tags:
        - exchAppHeader
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exchAppHeader.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exchAppHeader
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchAppHeader.prototype.updateAttributes__put_exchAppHeaders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchAppHeader'
        - name: id
          in: path
          description: exchAppHeader id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
    patch:
      tags:
        - exchAppHeader
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exchAppHeader.prototype.updateAttributes__patch_exchAppHeaders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchAppHeader'
        - name: id
          in: path
          description: exchAppHeader id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
  '/exchAppHeaders/{id}/replace':
    post:
      tags:
        - exchAppHeader
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exchAppHeader.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
  /exchAppHeaders/findOne:
    get:
      tags:
        - exchAppHeader
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exchAppHeader.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exchAppHeader'
      deprecated: false
  /exchAppHeaders/update:
    post:
      tags:
        - exchAppHeader
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exchAppHeader.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exchAppHeader'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exchAppHeaders/count:
    get:
      tags:
        - exchAppHeader
      summary: Count instances of the model matched by where from the data source.
      operationId: exchAppHeader.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exches:
    post:
      tags:
        - exch
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exch.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
    put:
      tags:
        - exch
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exch.upsert__put_exches
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
    patch:
      tags:
        - exch
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exch.upsert__patch_exches
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
    get:
      tags:
        - exch
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exch.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exch'
      deprecated: false
  /exches/replaceOrCreate:
    post:
      tags:
        - exch
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exch.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
  /exches/upsertWithWhere:
    post:
      tags:
        - exch
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exch.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
  '/exches/{id}/exists':
    get:
      tags:
        - exch
      summary: Check whether a model instance exists in the data source.
      operationId: 'exch.exists__get_exches_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exches/{id}':
    head:
      tags:
        - exch
      summary: Check whether a model instance exists in the data source.
      operationId: 'exch.exists__head_exches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exch
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exch.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
    delete:
      tags:
        - exch
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exch.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exch
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exch.prototype.updateAttributes__put_exches_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exch'
        - name: id
          in: path
          description: exch id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
    patch:
      tags:
        - exch
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exch.prototype.updateAttributes__patch_exches_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exch'
        - name: id
          in: path
          description: exch id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
  '/exches/{id}/replace':
    post:
      tags:
        - exch
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exch.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
  /exches/findOne:
    get:
      tags:
        - exch
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exch.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exch'
      deprecated: false
  /exches/update:
    post:
      tags:
        - exch
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exch.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exch'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exches/count:
    get:
      tags:
        - exch
      summary: Count instances of the model matched by where from the data source.
      operationId: exch.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exccatExcParms:
    post:
      tags:
        - exccatExcParm
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exccatExcParm.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
    put:
      tags:
        - exccatExcParm
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exccatExcParm.upsert__put_exccatExcParms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
    patch:
      tags:
        - exccatExcParm
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exccatExcParm.upsert__patch_exccatExcParms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
    get:
      tags:
        - exccatExcParm
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exccatExcParm.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exccatExcParm'
      deprecated: false
  /exccatExcParms/replaceOrCreate:
    post:
      tags:
        - exccatExcParm
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exccatExcParm.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
  /exccatExcParms/upsertWithWhere:
    post:
      tags:
        - exccatExcParm
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exccatExcParm.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
  '/exccatExcParms/{id}/exists':
    get:
      tags:
        - exccatExcParm
      summary: Check whether a model instance exists in the data source.
      operationId: 'exccatExcParm.exists__get_exccatExcParms_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exccatExcParms/{id}':
    head:
      tags:
        - exccatExcParm
      summary: Check whether a model instance exists in the data source.
      operationId: 'exccatExcParm.exists__head_exccatExcParms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exccatExcParm
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exccatExcParm.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
    delete:
      tags:
        - exccatExcParm
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exccatExcParm.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exccatExcParm
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exccatExcParm.prototype.updateAttributes__put_exccatExcParms_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExcParm'
        - name: id
          in: path
          description: exccatExcParm id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
    patch:
      tags:
        - exccatExcParm
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exccatExcParm.prototype.updateAttributes__patch_exccatExcParms_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExcParm'
        - name: id
          in: path
          description: exccatExcParm id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
  '/exccatExcParms/{id}/replace':
    post:
      tags:
        - exccatExcParm
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exccatExcParm.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
  /exccatExcParms/findOne:
    get:
      tags:
        - exccatExcParm
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exccatExcParm.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExcParm'
      deprecated: false
  /exccatExcParms/update:
    post:
      tags:
        - exccatExcParm
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exccatExcParm.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExcParm'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exccatExcParms/count:
    get:
      tags:
        - exccatExcParm
      summary: Count instances of the model matched by where from the data source.
      operationId: exccatExcParm.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /exccatExcs:
    post:
      tags:
        - exccatExc
      summary: Create a new instance of the model and persist it into the data source.
      operationId: exccatExc.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
    put:
      tags:
        - exccatExc
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exccatExc.upsert__put_exccatExcs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
    patch:
      tags:
        - exccatExc
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: exccatExc.upsert__patch_exccatExcs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
    get:
      tags:
        - exccatExc
      summary: Find all instances of the model matched by filter from the data source.
      operationId: exccatExc.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/exccatExc'
      deprecated: false
  /exccatExcs/replaceOrCreate:
    post:
      tags:
        - exccatExc
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: exccatExc.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
  /exccatExcs/upsertWithWhere:
    post:
      tags:
        - exccatExc
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: exccatExc.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
  '/exccatExcs/{id}/exists':
    get:
      tags:
        - exccatExc
      summary: Check whether a model instance exists in the data source.
      operationId: 'exccatExc.exists__get_exccatExcs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/exccatExcs/{id}':
    head:
      tags:
        - exccatExc
      summary: Check whether a model instance exists in the data source.
      operationId: 'exccatExc.exists__head_exccatExcs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - exccatExc
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: exccatExc.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
    delete:
      tags:
        - exccatExc
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: exccatExc.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - exccatExc
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exccatExc.prototype.updateAttributes__put_exccatExcs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExc'
        - name: id
          in: path
          description: exccatExc id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
    patch:
      tags:
        - exccatExc
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'exccatExc.prototype.updateAttributes__patch_exccatExcs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExc'
        - name: id
          in: path
          description: exccatExc id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
  '/exccatExcs/{id}/replace':
    post:
      tags:
        - exccatExc
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: exccatExc.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
  /exccatExcs/findOne:
    get:
      tags:
        - exccatExc
      summary: Find first instance of the model matched by filter from the data source.
      operationId: exccatExc.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/exccatExc'
      deprecated: false
  /exccatExcs/update:
    post:
      tags:
        - exccatExc
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: exccatExc.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/exccatExc'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /exccatExcs/count:
    get:
      tags:
        - exccatExc
      summary: Count instances of the model matched by where from the data source.
      operationId: exccatExc.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /eventRenderers:
    post:
      tags:
        - eventRenderer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: eventRenderer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
    put:
      tags:
        - eventRenderer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: eventRenderer.upsert__put_eventRenderers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
    patch:
      tags:
        - eventRenderer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: eventRenderer.upsert__patch_eventRenderers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
    get:
      tags:
        - eventRenderer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: eventRenderer.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/eventRenderer'
      deprecated: false
  /eventRenderers/replaceOrCreate:
    post:
      tags:
        - eventRenderer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: eventRenderer.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
  /eventRenderers/upsertWithWhere:
    post:
      tags:
        - eventRenderer
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: eventRenderer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
  '/eventRenderers/{id}/exists':
    get:
      tags:
        - eventRenderer
      summary: Check whether a model instance exists in the data source.
      operationId: 'eventRenderer.exists__get_eventRenderers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/eventRenderers/{id}':
    head:
      tags:
        - eventRenderer
      summary: Check whether a model instance exists in the data source.
      operationId: 'eventRenderer.exists__head_eventRenderers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - eventRenderer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: eventRenderer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
    delete:
      tags:
        - eventRenderer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: eventRenderer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - eventRenderer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'eventRenderer.prototype.updateAttributes__put_eventRenderers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/eventRenderer'
        - name: id
          in: path
          description: eventRenderer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
    patch:
      tags:
        - eventRenderer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'eventRenderer.prototype.updateAttributes__patch_eventRenderers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/eventRenderer'
        - name: id
          in: path
          description: eventRenderer id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
  '/eventRenderers/{id}/replace':
    post:
      tags:
        - eventRenderer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: eventRenderer.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
  /eventRenderers/findOne:
    get:
      tags:
        - eventRenderer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: eventRenderer.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/eventRenderer'
      deprecated: false
  /eventRenderers/update:
    post:
      tags:
        - eventRenderer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: eventRenderer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/eventRenderer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /eventRenderers/count:
    get:
      tags:
        - eventRenderer
      summary: Count instances of the model matched by where from the data source.
      operationId: eventRenderer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /catInfos:
    post:
      tags:
        - catInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: catInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
    put:
      tags:
        - catInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: catInfo.upsert__put_catInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
    patch:
      tags:
        - catInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: catInfo.upsert__patch_catInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
    get:
      tags:
        - catInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: catInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/catInfo'
      deprecated: false
  /catInfos/replaceOrCreate:
    post:
      tags:
        - catInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: catInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
  /catInfos/upsertWithWhere:
    post:
      tags:
        - catInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: catInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
  '/catInfos/{id}/exists':
    get:
      tags:
        - catInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'catInfo.exists__get_catInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/catInfos/{id}':
    head:
      tags:
        - catInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'catInfo.exists__head_catInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - catInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: catInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
    delete:
      tags:
        - catInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: catInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - catInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'catInfo.prototype.updateAttributes__put_catInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/catInfo'
        - name: id
          in: path
          description: catInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
    patch:
      tags:
        - catInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'catInfo.prototype.updateAttributes__patch_catInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/catInfo'
        - name: id
          in: path
          description: catInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
  '/catInfos/{id}/replace':
    post:
      tags:
        - catInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: catInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
  /catInfos/findOne:
    get:
      tags:
        - catInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: catInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/catInfo'
      deprecated: false
  /catInfos/update:
    post:
      tags:
        - catInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: catInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/catInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /catInfos/count:
    get:
      tags:
        - catInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: catInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /appQueries:
    post:
      tags:
        - appQuery
      summary: Create a new instance of the model and persist it into the data source.
      operationId: appQuery.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
    put:
      tags:
        - appQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: appQuery.upsert__put_appQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
    patch:
      tags:
        - appQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: appQuery.upsert__patch_appQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
    get:
      tags:
        - appQuery
      summary: Find all instances of the model matched by filter from the data source.
      operationId: appQuery.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/appQuery'
      deprecated: false
  /appQueries/replaceOrCreate:
    post:
      tags:
        - appQuery
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: appQuery.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
  /appQueries/upsertWithWhere:
    post:
      tags:
        - appQuery
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: appQuery.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
  '/appQueries/{id}/exists':
    get:
      tags:
        - appQuery
      summary: Check whether a model instance exists in the data source.
      operationId: 'appQuery.exists__get_appQueries_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/appQueries/{id}':
    head:
      tags:
        - appQuery
      summary: Check whether a model instance exists in the data source.
      operationId: 'appQuery.exists__head_appQueries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - appQuery
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: appQuery.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
    delete:
      tags:
        - appQuery
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: appQuery.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - appQuery
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'appQuery.prototype.updateAttributes__put_appQueries_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appQuery'
        - name: id
          in: path
          description: appQuery id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
    patch:
      tags:
        - appQuery
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'appQuery.prototype.updateAttributes__patch_appQueries_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appQuery'
        - name: id
          in: path
          description: appQuery id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
  '/appQueries/{id}/replace':
    post:
      tags:
        - appQuery
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: appQuery.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
  /appQueries/findOne:
    get:
      tags:
        - appQuery
      summary: Find first instance of the model matched by filter from the data source.
      operationId: appQuery.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appQuery'
      deprecated: false
  /appQueries/update:
    post:
      tags:
        - appQuery
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: appQuery.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /appQueries/count:
    get:
      tags:
        - appQuery
      summary: Count instances of the model matched by where from the data source.
      operationId: appQuery.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /appInfos:
    post:
      tags:
        - appInfo
      summary: Create a new instance of the model and persist it into the data source.
      operationId: appInfo.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
    put:
      tags:
        - appInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: appInfo.upsert__put_appInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
    patch:
      tags:
        - appInfo
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: appInfo.upsert__patch_appInfos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
    get:
      tags:
        - appInfo
      summary: Find all instances of the model matched by filter from the data source.
      operationId: appInfo.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/appInfo'
      deprecated: false
  /appInfos/replaceOrCreate:
    post:
      tags:
        - appInfo
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: appInfo.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
  /appInfos/upsertWithWhere:
    post:
      tags:
        - appInfo
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: appInfo.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
  '/appInfos/{id}/exists':
    get:
      tags:
        - appInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'appInfo.exists__get_appInfos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/appInfos/{id}':
    head:
      tags:
        - appInfo
      summary: Check whether a model instance exists in the data source.
      operationId: 'appInfo.exists__head_appInfos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - appInfo
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: appInfo.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
    delete:
      tags:
        - appInfo
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: appInfo.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - appInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'appInfo.prototype.updateAttributes__put_appInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appInfo'
        - name: id
          in: path
          description: appInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
    patch:
      tags:
        - appInfo
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'appInfo.prototype.updateAttributes__patch_appInfos_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appInfo'
        - name: id
          in: path
          description: appInfo id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
  '/appInfos/{id}/replace':
    post:
      tags:
        - appInfo
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: appInfo.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
  /appInfos/findOne:
    get:
      tags:
        - appInfo
      summary: Find first instance of the model matched by filter from the data source.
      operationId: appInfo.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/appInfo'
      deprecated: false
  /appInfos/update:
    post:
      tags:
        - appInfo
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: appInfo.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/appInfo'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /appInfos/count:
    get:
      tags:
        - appInfo
      summary: Count instances of the model matched by where from the data source.
      operationId: appInfo.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /TestBridges/getJavaObject:
    get:
      tags:
        - TestBridge
      operationId: TestBridge.getJavaObject
      parameters:
        - name: data
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              TestBridge:
                type: object
      deprecated: false
  /ExceptionQueries:
    post:
      tags:
        - ExceptionQuery
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ExceptionQuery.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
    put:
      tags:
        - ExceptionQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionQuery.upsert__put_ExceptionQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
    patch:
      tags:
        - ExceptionQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionQuery.upsert__patch_ExceptionQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
    get:
      tags:
        - ExceptionQuery
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ExceptionQuery.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ExceptionQuery'
      deprecated: false
  /ExceptionQueries/replaceOrCreate:
    post:
      tags:
        - ExceptionQuery
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionQuery.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
  /ExceptionQueries/upsertWithWhere:
    post:
      tags:
        - ExceptionQuery
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ExceptionQuery.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
  '/ExceptionQueries/{id}/replace':
    post:
      tags:
        - ExceptionQuery
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ExceptionQuery.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionQuery'
      deprecated: false
  '/ExceptionQueries/{id}':
    delete:
      tags:
        - ExceptionQuery
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ExceptionQuery.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /ExceptionMessages:
    post:
      tags:
        - ExceptionMessage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ExceptionMessage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionMessage'
      deprecated: false
    get:
      tags:
        - ExceptionMessage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ExceptionMessage.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ExceptionMessage'
      deprecated: false
  /ExceptionMessages/replaceOrCreate:
    post:
      tags:
        - ExceptionMessage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionMessage.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionMessage'
      deprecated: false
  /ExceptionMessages/upsertWithWhere:
    post:
      tags:
        - ExceptionMessage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ExceptionMessage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ExceptionMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionMessage'
      deprecated: false
  '/ExceptionMessages/{id}/replace':
    post:
      tags:
        - ExceptionMessage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ExceptionMessage.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionMessage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionMessage'
      deprecated: false
  /ExceptionDetails/replaceOrCreate:
    post:
      tags:
        - ExceptionDetails
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionDetails.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionDetails'
      deprecated: false
  /ExceptionDetails/upsertWithWhere:
    post:
      tags:
        - ExceptionDetails
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ExceptionDetails.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ExceptionDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionDetails'
      deprecated: false
  '/ExceptionDetails/{id}/replace':
    post:
      tags:
        - ExceptionDetails
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ExceptionDetails.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionDetails'
      deprecated: false
  /ExceptionDetails:
    get:
      tags:
        - ExceptionDetails
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ExceptionDetails.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ExceptionDetails'
      deprecated: false
  /ExceptionCatalogs/replaceOrCreate:
    post:
      tags:
        - ExceptionCatalog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ExceptionCatalog.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionCatalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionCatalog'
      deprecated: false
  /ExceptionCatalogs/upsertWithWhere:
    post:
      tags:
        - ExceptionCatalog
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ExceptionCatalog.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ExceptionCatalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionCatalog'
      deprecated: false
  '/ExceptionCatalogs/{id}/replace':
    post:
      tags:
        - ExceptionCatalog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: ExceptionCatalog.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ExceptionCatalog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ExceptionCatalog'
      deprecated: false
  /ExceptionCatalogs:
    get:
      tags:
        - ExceptionCatalog
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ExceptionCatalog.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ExceptionCatalog'
      deprecated: false
definitions:
  Users:
    properties:
      challenges:
        type: object
      created:
        type: string
      credentials:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: string
      lastUpdated:
        type: string
      realm:
        type: string
      status:
        type: string
      username:
        type: string
    required:
      - email
    additionalProperties: false
  x-any:
    properties: {}
  Exception:
    properties:
      appid:
        type: string
      catalog:
        type: string
      code:
        type: string
      data_uuid:
        type: string
      descr:
        type: string
      exc_uuid:
        type: string
      priority:
        type: number
        format: double
      query_name:
        type: string
      requeue_qmgr:
        type: string
      requeue_queue:
        type: string
      timestamp:
        type: string
      user_id:
        type: string
      version:
        type: string
      id:
        type: string
    required:
      - appid
      - catalog
      - code
      - data_uuid
      - descr
      - exc_uuid
      - priority
      - timestamp
      - version
    additionalProperties: false
  App:
    properties:
      AppID:
        type: string
      AppName:
        type: string
      Role:
        type: string
      id:
        type: number
        format: double
    required:
      - AppID
      - AppName
      - Role
    additionalProperties: false
  CatalogVersion:
    properties:
      Catalog:
        type: string
      Version:
        type: string
      id:
        type: number
        format: double
    required:
      - Catalog
      - Version
    additionalProperties: false
  CodeName:
    properties:
      Catalog:
        type: string
      Code:
        type: string
      Name:
        type: string
      Version:
        type: string
      id:
        type: number
        format: double
    required:
      - Catalog
      - Code
      - Name
      - Version
    additionalProperties: false
  Criteria:
    properties:
      CriteriaString:
        type: string
      Timestamp:
        type: string
        format: date
      UserEmail:
        type: string
      id:
        type: number
        format: double
    required:
      - CriteriaString
      - Timestamp
      - UserEmail
    additionalProperties: false
  Event:
    properties:
      appid:
        type: string
      event_counter:
        type: string
      event_name:
        type: string
      event_renderer:
        type: object
      event_timestamp:
        type: string
      event_type:
        type: string
      event_uuid:
        type: string
      exc_uuid:
        type: string
      global_tx_name:
        type: string
      global_txid:
        type: string
      local_tx_name:
        type: string
      local_txid:
        type: string
      parent_tx_name:
        type: string
      parent_txid:
        type: string
      priority:
        type: string
      id:
        type: number
        format: double
    required:
      - event_renderer
      - event_timestamp
      - event_type
      - event_uuid
      - priority
    additionalProperties: false
  EventDetails-IIB:
    properties:
      AppData:
        type: array
        items:
          type: object
      Catalog:
        type: object
      app_name:
        type: string
      app_uuid:
        type: string
      event_counter:
        type: string
      event_data_type:
        type: string
      event_name:
        type: string
      event_source:
        type: string
      event_timestamp:
        type: string
        format: date
      event_uuid:
        type: string
      event_version:
        type: string
      exc_uuid:
        type: string
      global_txid:
        type: string
      lib_name:
        type: string
      lib_uuid:
        type: string
      local_txid:
        type: string
      parent_txid:
        type: string
      priority:
        type: string
      product_version:
        type: string
      id:
        type: number
        format: double
    required:
      - AppData
      - Catalog
      - event_counter
      - event_name
      - event_source
      - event_timestamp
      - event_uuid
      - priority
    additionalProperties: false
  EventDetails-IIBStats:
    properties:
      Broker:
        type: object
      FlowStats:
        type: object
      NodeStats:
        type: array
        items:
          type: object
      Server:
        type: object
      end_timestamp:
        type: string
        format: date
      event_uuid:
        type: string
      start_timestamp:
        type: string
        format: date
      id:
        type: number
        format: double
    required:
      - Broker
      - FlowStats
      - NodeStats
      - Server
      - end_timestamp
      - event_uuid
      - start_timestamp
    additionalProperties: false
  EventQuery:
    properties:
      event_name:
        type: string
      exc_query_name:
        type: string
      fields:
        type: array
        items:
          type: string
      global_tx_name:
        type: string
      local_tx_name:
        type: string
      parent_tx_name:
        type: string
      query_name:
        type: string
      user_id:
        type: string
      id:
        type: number
        format: double
    required:
      - query_name
      - user_id
    additionalProperties: false
  mqmd:
    properties:
      accToken:
        type: string
      appOrigin:
        type: string
      appType:
        type: string
      appid:
        type: string
      application:
        type: string
      boCount:
        type: string
      ccsid:
        type: string
      corrId:
        type: string
      encoding:
        type: string
      expiry:
        type: string
      feedback:
        type: string
      format:
        type: string
      grpId:
        type: string
      msgFlags:
        type: string
      msgId:
        type: string
      msgLen:
        type: string
      msgType:
        type: string
      offset:
        type: string
      persistence:
        type: string
      priority:
        type: string
      replyQ:
        type: string
      replyQMgr:
        type: string
      report:
        type: string
      seqno:
        type: string
      timestamp:
        type: string
      user:
        type: string
      version:
        type: string
      id:
        type: number
        format: double
    required:
      - version
    additionalProperties: false
  iib-threadStats:
    properties:
      input_msg_max_size:
        type: string
      input_msg_min_size:
        type: string
      input_msg_no:
        type: string
      input_msg_total_size:
        type: string
      input_wait_cpu_time:
        type: string
      input_wait_elapsed_time:
        type: string
      threadId:
        type: string
      total_cpu_time:
        type: string
      total_elapsed_time:
        type: string
      id:
        type: number
        format: double
    required:
      - input_msg_max_size
      - input_msg_min_size
      - input_msg_no
      - input_msg_total_size
      - input_wait_cpu_time
      - input_wait_elapsed_time
      - threadId
      - total_cpu_time
      - total_elapsed_time
    additionalProperties: false
  iib-terminalStats:
    properties:
      invocations:
        type: string
      term_label:
        type: string
      term_type:
        type: string
      id:
        type: number
        format: double
    required:
      - invocations
      - term_label
      - term_type
    additionalProperties: false
  iib-serverInfo:
    properties:
      descr:
        type: string
      name:
        type: string
      uuid:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - uuid
    additionalProperties: false
  iib-nodeStats:
    properties:
      Node:
        type: object
      TerminalStats:
        type: array
        items:
          type: object
      invocations:
        type: string
      max_cpu_time:
        type: string
      max_elapsed_time:
        type: string
      min_cpu_time:
        type: string
      min_elapsed_time:
        type: string
      term_input_count:
        type: string
      term_output_count:
        type: string
      total_cpu_time:
        type: string
      total_elapsed_time:
        type: string
      id:
        type: number
        format: double
    required:
      - Node
      - TerminalStats
      - invocations
      - max_cpu_time
      - max_elapsed_time
      - min_cpu_time
      - min_elapsed_time
      - term_input_count
      - term_output_count
      - total_cpu_time
      - total_elapsed_time
    additionalProperties: false
  iib-nodeInfo:
    properties:
      descr:
        type: string
      detail:
        type: string
      nodeLabel:
        type: string
      nodeType:
        type: string
      terminal:
        type: string
      id:
        type: number
        format: double
    required:
      - nodeLabel
      - nodeType
    additionalProperties: false
  iib-flowStats:
    properties:
      Flow:
        type: object
      ThreadStats:
        type: array
        items:
          type: object
      accounting_origin:
        type: string
      backout_count:
        type: string
      commit_count:
        type: string
      errors_mq:
        type: string
      errors_total_msg:
        type: string
      errors_total_processing:
        type: string
      input_msg_max_size:
        type: string
      input_msg_min_size:
        type: string
      input_msg_no:
        type: string
      input_msg_total_size:
        type: string
      input_wait_cpu_time:
        type: string
      input_wait_elapsed_time:
        type: string
      max_cpu_time:
        type: string
      max_elapsed_time:
        type: string
      min_cpu_time:
        type: string
      min_elapsed_time:
        type: string
      threads_max_reached:
        type: string
      threads_pool_size:
        type: string
      timeout_agregession:
        type: string
      total_cpu_time:
        type: string
      total_elapsed_time:
        type: string
      id:
        type: number
        format: double
    required:
      - Flow
      - ThreadStats
      - accounting_origin
      - backout_count
      - commit_count
      - errors_mq
      - errors_total_msg
      - errors_total_processing
      - input_msg_max_size
      - input_msg_min_size
      - input_msg_no
      - input_msg_total_size
      - input_wait_cpu_time
      - input_wait_elapsed_time
      - max_cpu_time
      - max_elapsed_time
      - min_cpu_time
      - min_elapsed_time
      - threads_max_reached
      - threads_pool_size
      - timeout_agregession
      - total_cpu_time
      - total_elapsed_time
    additionalProperties: false
  iib-flowInfo:
    properties:
      descr:
        type: string
      name:
        type: string
      threadId:
        type: string
      uuid:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - threadId
    additionalProperties: false
  iib-eventData:
    properties:
      app_data_name:
        type: string
      app_data_namespace:
        type: string
      app_data_type:
        type: string
      id:
        type: number
        format: double
    required:
      - app_data_name
      - app_data_type
    additionalProperties: false
  iib-brokerInfo:
    properties:
      descr:
        type: string
      name:
        type: string
      uuid:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - uuid
    additionalProperties: false
  iib-Catalog:
    properties:
      Broker:
        type: object
      Flow:
        type: object
      Node:
        type: object
      Server:
        type: object
      id:
        type: number
        format: double
    required:
      - Broker
      - Flow
      - Node
      - Server
    additionalProperties: false
  exchStack:
    properties:
      class:
        type: string
      file:
        type: string
      function:
        type: string
      line:
        type: string
      id:
        type: number
        format: double
    required:
      - class
      - file
      - function
      - line
    additionalProperties: false
  exchReQueue:
    properties:
      MQMD:
        type: object
      env:
        type: string
      qmgr:
        type: string
      queue:
        type: string
      id:
        type: number
        format: double
    required:
      - env
      - qmgr
      - queue
    additionalProperties: false
  exchParm:
    properties:
      name:
        type: string
      value:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - value
    additionalProperties: false
  exchDump:
    properties:
      dump:
        type: string
      type:
        type: string
      id:
        type: number
        format: double
    required:
      - dump
      - type
    additionalProperties: false
  exchApplication:
    properties:
      CallStack:
        type: array
        items:
          type: object
      ExceptionStack:
        type: array
        items:
          type: object
      Headers:
        type: array
        items:
          type: object
      appid:
        type: string
      application:
        type: string
      class:
        type: string
      container:
        type: string
      descr:
        type: string
      email:
        type: string
      file:
        type: string
      function:
        type: string
      hostname:
        type: string
      line:
        type: string
      server:
        type: string
      server_cluster:
        type: string
      id:
        type: number
        format: double
    required:
      - CallStack
      - appid
      - class
      - file
      - function
      - hostname
      - line
    additionalProperties: false
  exchAppHeader:
    properties:
      Parameters:
        type: array
        items:
          type: object
      header:
        type: string
      id:
        type: number
        format: double
    required:
      - Parameters
      - header
    additionalProperties: false
  exch:
    properties:
      Application:
        type: object
      ExceptionDump:
        type: object
      Parameters:
        type: array
        items:
          type: object
      ReQueue:
        type: object
      catalog:
        type: string
      code:
        type: string
      descr:
        type: string
      exc_uuid:
        type: string
      managed:
        type: boolean
      timestamp:
        type: string
        format: date
      version:
        type: string
      id:
        type: number
        format: double
    required:
      - Application
      - catalog
      - code
      - exc_uuid
      - timestamp
      - version
    additionalProperties: false
  exccatExcParm:
    properties:
      descr:
        type: string
      name:
        type: string
      id:
        type: number
        format: double
    required:
      - descr
      - name
    additionalProperties: false
  exccatExc:
    properties:
      Parameters:
        type: array
        items:
          type: object
      code:
        type: string
      descr:
        type: string
      name:
        type: string
      priority:
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - code
      - descr
      - name
      - priority
    additionalProperties: false
  eventRenderer:
    properties:
      eclipse_renderer:
        type: string
      mobile_renderer:
        type: string
      web_renderer:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  catInfo:
    properties:
      descr:
        type: string
      name:
        type: string
      version:
        type: string
      id:
        type: number
        format: double
    required:
      - descr
      - name
      - version
    additionalProperties: false
  appQuery:
    properties:
      appids:
        type: array
        items:
          type: string
      class:
        type: string
      container:
        type: string
      function:
        type: string
      headers:
        type: array
        items:
          type: string
      hostname:
        type: string
      server:
        type: string
      server_cluster:
        type: string
      id:
        type: number
        format: double
    additionalProperties: false
  appInfo:
    properties:
      Header:
        type: array
        items:
          type: object
      appid:
        type: string
      application:
        type: string
      class:
        type: string
      container:
        type: string
      descr:
        type: string
      email:
        type: string
      file:
        type: string
      function:
        type: string
      hostname:
        type: string
      line:
        type: string
      server:
        type: string
      server_cluster:
        type: string
      id:
        type: number
        format: double
    required:
      - appid
      - class
      - file
      - function
      - hostname
      - line
    additionalProperties: false
  ExceptionQuery:
    properties:
      AppQuery:
        type: object
      Catalog:
        type: object
      end_timestamp:
        type: string
      name:
        type: string
      notification:
        type: boolean
      notification_duration:
        type: number
        format: double
      past_hours:
        type: number
        format: double
      priority:
        type: number
        format: double
      start_timestamp:
        type: string
      user_id:
        type: string
      id:
        type: number
        format: double
    required:
      - name
      - user_id
    additionalProperties: false
  ExceptionMessage:
    properties:
      ExceptionHeader:
        type: object
      descr:
        type: string
      exch_version:
        type: string
      name:
        type: string
      id:
        type: number
        format: double
    required:
      - ExceptionHeader
      - descr
      - exch_version
      - name
    additionalProperties: false
  ExceptionDetails:
    properties:
      Application:
        type: object
      Catalog:
        type: object
      Parameters:
        type: array
        items:
          type: object
      code:
        type: string
      descr:
        type: string
      exc_uuid:
        type: string
      name:
        type: string
      timestamp:
        type: string
      id:
        type: number
        format: double
    required:
      - Application
      - code
      - descr
      - exc_uuid
      - name
      - timestamp
    additionalProperties: false
  ExceptionCatalog:
    properties:
      Exceptions:
        type: array
        items:
          type: object
      appid:
        type: string
      descr:
        type: string
      expiredQueue:
        type: string
      expiry:
        type: number
        format: double
      name:
        type: string
      version:
        type: string
      id:
        type: number
        format: double
    required:
      - Exceptions
      - appid
      - descr
      - expiredQueue
      - expiry
      - name
      - version
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  version: 1.0.1
  title: Eneterprise Exception Handler  API
  description: Eneterprise Exception Handler  API
  contact:
    name: William Kersting
    email: wtkersti@ncsu.edu
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'https://eeh-rest-node.mybluemix.net'
        invoke-tls-profile: 'client:Loopback-client'
  properties:
    TARGET_HOST:
      value: >-
        https://apiconnect-7892f3b5-06d1-4f36-a924-f4f90e2ffead.rgupta1usibmcom-redbook.apic.mybluemix.net/
      description: ''
      encoded: false
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  gateway: datapower-gateway
  assembly:
    execute:
      - invoke:
          title: invoke
          timeout: 60
          verb: keep
          cache-response: protocol
          cache-ttl: 900
          stop-on-error:
            - null
          version: 1.0.0
          target-url: $(TARGET_HOST)$(request.path)
    catch: []
externalDocs:
  description: Eneterprise Exception Handler  API
  url: >-
    https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Wfb0af2c6348e_4b4a_b630_02e3f6e9a35d/page/EEH%20Open%20Projects
